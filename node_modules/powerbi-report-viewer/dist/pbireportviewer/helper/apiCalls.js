"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.httpGet = httpGet;

var _reactPromiseTracker = require("react-promise-tracker");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function httpGet(_x, _x2, _x3, _x4) {
  return _httpGet.apply(this, arguments);
}

function _httpGet() {
  _httpGet = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(token, url, onSuccessCallback, onErrorCallback) {
    var response, data;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return (0, _reactPromiseTracker.trackPromise)(fetch(url, {
              method: 'get',
              headers: {
                'Content-Type': 'application/json',
                'X-Content-Type-Options': 'nosniff',
                'Authorization': "Bearer " + token
              }
            }));

          case 3:
            response = _context.sent;
            _context.next = 6;
            return response.json();

          case 6:
            data = _context.sent;

            if (onSuccessCallback != null) {
              onSuccessCallback(data);
            }

            _context.next = 13;
            break;

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](0);

            if (onErrorCallback != null) {
              console.log('error');
              onErrorCallback(_context.t0);
            }

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 10]]);
  }));
  return _httpGet.apply(this, arguments);
}