"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Dropdown = require("office-ui-fabric-react/lib/Dropdown");

var _officeUiFabricReact = require("office-ui-fabric-react");

var _reportViewer = require("./reportViewer.styles");

var _apiCalls = require("./helper/apiCalls");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ReportSelection = function ReportSelection(props) {
  var filterExpanded = props.filterExpanded,
      accessToken = props.accessToken,
      showBackButton = props.showBackButton;

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      accessToken1 = _useState2[0],
      setAccessToken = _useState2[1];

  var _useState3 = (0, _react.useState)([]),
      _useState4 = _slicedToArray(_useState3, 2),
      WSsList = _useState4[0],
      setWSsList = _useState4[1];

  var _useState5 = (0, _react.useState)([]),
      _useState6 = _slicedToArray(_useState5, 2),
      AppsList = _useState6[0],
      setAppsList = _useState6[1];

  var _useState7 = (0, _react.useState)([]),
      _useState8 = _slicedToArray(_useState7, 2),
      WSnAppsList = _useState8[0],
      setWSnAppsList = _useState8[1];

  var _useState9 = (0, _react.useState)([]),
      _useState10 = _slicedToArray(_useState9, 2),
      ReportsListDd = _useState10[0],
      setReportsListDd = _useState10[1];

  var _useState11 = (0, _react.useState)(),
      _useState12 = _slicedToArray(_useState11, 2),
      SelectedWSId = _useState12[0],
      setSelectedWSId = _useState12[1];

  var _useState13 = (0, _react.useState)(),
      _useState14 = _slicedToArray(_useState13, 2),
      CurrentReport = _useState14[0],
      setCurrentReport = _useState14[1];

  var _useState15 = (0, _react.useState)([]),
      _useState16 = _slicedToArray(_useState15, 2),
      ReportsList = _useState16[0],
      setReportsList = _useState16[1];

  var _useState17 = (0, _react.useState)('CollapseContentSingle'),
      _useState18 = _slicedToArray(_useState17, 2),
      expandBtnIconName = _useState18[0],
      setexpandBtnIconName = _useState18[1];

  var _useState19 = (0, _react.useState)(false),
      _useState20 = _slicedToArray(_useState19, 2),
      showFilter = _useState20[0],
      setShowFilter = _useState20[1];

  var _useState21 = (0, _react.useState)(true),
      _useState22 = _slicedToArray(_useState21, 2),
      showBackBtn = _useState22[0],
      setShowBackBtn = _useState22[1];

  var expandIcon = {
    iconName: expandBtnIconName
  };
  var backIcon = {
    iconName: 'NavigateBack'
  };
  (0, _react.useEffect)(function () {
    if (accessToken) {
      setAccessToken(accessToken);
    }
  }, [accessToken]);
  (0, _react.useEffect)(function () {
    if (accessToken1) {
      fetchAppsforUser();
      fetchWSforUser();
    }
  }, [accessToken1]);
  (0, _react.useEffect)(function () {
    if (showBackButton) setShowBackBtn(!showBackButton);else setShowBackBtn(!showBackButton);
  }, [showBackButton]);
  (0, _react.useEffect)(function () {
    if (filterExpanded) {
      setShowFilter(!filterExpanded);
      setexpandBtnIconName('CollapseContentSingle');
    } else {
      setShowFilter(!filterExpanded);
      setexpandBtnIconName('ExploreContentSingle');
    }
  }, [filterExpanded]);
  (0, _react.useEffect)(function () {
    if (SelectedWSId) {
      fetchReportsforWS();
    }
  }, [SelectedWSId]);
  (0, _react.useEffect)(function () {
    if (WSsList || AppsList) {
      loadWSnApps();
    }
  }, [WSsList, AppsList]); //Init fetches

  var fetchReportsforWS = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var apiEndPoint;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              apiEndPoint = '';
              if (SelectedWSId && SelectedWSId.title === 'ws') apiEndPoint = "https://api.powerbi.com/v1.0/myorg/groups/".concat(SelectedWSId.key, "/reports");else if (SelectedWSId && SelectedWSId.title === 'app') apiEndPoint = "https://api.powerbi.com/v1.0/myorg/apps/".concat(SelectedWSId.key, "/reports");
              _context.next = 4;
              return (0, _apiCalls.httpGet)(accessToken1, apiEndPoint, fetchReportsforUserSuccess, errorReportsCallBack);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function fetchReportsforWS() {
      return _ref.apply(this, arguments);
    };
  }();

  var fetchReportsforUserSuccess = function fetchReportsforUserSuccess(response) {
    var ResponseListDd = response.value.map(function (name) {
      return {
        key: name.id,
        text: name.name
      };
    });
    setReportsListDd(ResponseListDd);
    var ResponseList = response.value.map(function (name) {
      return {
        reportId: name.id,
        name: name.name,
        embedUrl: name.embedUrl,
        webURL: name.webUrl
      };
    });
    setReportsList(ResponseList);
  };

  var errorReportsCallBack = function errorReportsCallBack(error) {
    console.log("errorLoadReport" + error);
  };

  var fetchAppsforUser = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var apiEndPoint;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              //const auth = parentContext.getAuthContext();
              apiEndPoint = "https://api.powerbi.com/v1.0/myorg/apps";
              _context2.next = 3;
              return (0, _apiCalls.httpGet)(accessToken1, apiEndPoint, fetchAppsforUserSuccess, errorAppsCallBack);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function fetchAppsforUser() {
      return _ref2.apply(this, arguments);
    };
  }(); // function filterConfiguredApps(element, index, array) {
  //     return (element.text === 'Trade BI Insights');
  // }


  var fetchAppsforUserSuccess = function fetchAppsforUserSuccess(response) {
    var ResponseList = response.value.map(function (name) {
      return {
        key: name.id,
        text: name.name,
        title: 'app'
      };
    }); //let filteResponseList = ResponseList.filter(filterConfiguredApps);

    var filteResponseList = ResponseList;
    filteResponseList.unshift({
      key: -2,
      text: "-",
      itemType: _Dropdown.DropdownMenuItemType.Divider
    });
    filteResponseList.unshift({
      key: -1,
      text: "Apps",
      itemType: _Dropdown.DropdownMenuItemType.Header
    });
    setAppsList(filteResponseList);
  };

  var errorAppsCallBack = function errorAppsCallBack(error) {
    console.log("AppsLoadError" + error);
  };

  var fetchWSforUser = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var filter, apiEndPoint;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              filter = "contains(name,'Trade BI Workspace')%20or%20contains(name,'TradeBI - Preview Workspace')%20or%20contains(name,'Global Trade Screening Platform-Bridger')";
              apiEndPoint = "https://api.powerbi.com/v1.0/myorg/groups"; // ?$filter=" + filter;

              _context3.next = 4;
              return (0, _apiCalls.httpGet)(accessToken1, apiEndPoint, fetchWSforUserSuccess, errorWSCallBack);

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function fetchWSforUser() {
      return _ref3.apply(this, arguments);
    };
  }();

  var fetchWSforUserSuccess = function fetchWSforUserSuccess(response) {
    var ResponseList = response.value.map(function (name) {
      return {
        key: name.id,
        text: name.name,
        title: 'ws'
      };
    });
    ResponseList.unshift({
      key: -4,
      text: "-",
      itemType: _Dropdown.DropdownMenuItemType.Divider
    });
    ResponseList.unshift({
      key: -3,
      text: "Work Spaces",
      itemType: _Dropdown.DropdownMenuItemType.Header
    });
    setWSsList(ResponseList);
  };

  var errorWSCallBack = function errorWSCallBack(error) {
    console.log("WSLoadError" + error);
  };

  var loadWSnApps = function loadWSnApps() {
    var ResponseList = WSsList.map(function (name) {
      return {
        key: name.key,
        text: name.text,
        itemType: name.itemType,
        title: name.title
      };
    });
    AppsList.forEach(function (item) {
      var item1 = {
        key: item.key,
        text: item.text,
        itemType: item.itemType,
        title: item.title
      };
      ResponseList.push(item1);
    });
    setWSnAppsList(ResponseList);
  }; //load report


  function onWSorAppSelectionChange(event, option) {
    if (option === undefined) {
      console.log("no WS/App selected");
      return;
    } else {
      var selectedItem = option;
      setSelectedWSId(selectedItem);
    }
  }

  function onReportSelectionChange(event, option) {
    if (option === undefined) {
      console.log("no Report selected");
      return;
    } else {
      if (ReportsList) {
        var i = -1;
        i = ReportsList.findIndex(function (x) {
          return x.reportId === option.key.toString();
        });
        setCurrentReport(ReportsList[i]);

        if (props.onReportSelection) {
          props.onReportSelection(ReportsList[i]);
        }
      }
    }
  }

  function OnNavigateBack() {
    if (props.onBackButtonClick) {
      props.onBackButtonClick();
    }
  }

  function expandColapseFilter() {
    if (showFilter) {
      setShowFilter(false);
      setexpandBtnIconName('CollapseContentSingle');
    } else {
      setShowFilter(true);
      setexpandBtnIconName('ExploreContentSingle');
    }
  }

  ;

  var renderMain = function renderMain() {
    return /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Fabric, null, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack, {
      horizontalAlign: "start",
      horizontal: true,
      tokens: _reportViewer.stackTokens,
      className: _reportViewer.controlClass.optionsStyles1
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack.Item, {
      grow: 1
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.ActionButton, {
      split: true,
      iconProps: expandIcon,
      allowDisabledFocus: true,
      onClick: expandColapseFilter
    }, "Report Selection")), /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack.Item, {
      grow: 1
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Separator, {
      vertical: true
    })), /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack.Item, {
      grow: 1
    }, /*#__PURE__*/_react["default"].createElement("div", {
      hidden: showBackBtn
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.ActionButton, {
      split: true,
      iconProps: backIcon,
      allowDisabledFocus: true,
      onClick: OnNavigateBack
    }, "Back")))), /*#__PURE__*/_react["default"].createElement("div", {
      hidden: showFilter
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack, {
      horizontalAlign: "start",
      horizontal: true,
      tokens: _reportViewer.stackTokens,
      className: _reportViewer.controlClass.optionsStyles
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack.Item, {
      grow: 1
    }, /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
      placeholder: "Select a work space/App",
      multiSelect: false,
      options: WSnAppsList,
      ariaLabel: "Select a Work Space or App",
      styles: _reportViewer.dropdownStyles,
      onChange: onWSorAppSelectionChange
    })), /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack.Item, {
      grow: 1
    }, /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
      placeholder: "Select a report",
      multiSelect: false,
      options: ReportsListDd,
      ariaLabel: "Select a Report",
      styles: _reportViewer.dropdownStyles,
      onChange: onReportSelectionChange
    })))), /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Separator, null));
  };

  return renderMain();
};

var _default = ReportSelection;
exports["default"] = _default;