"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Dropdown = require("office-ui-fabric-react/lib/Dropdown");

var _CommandBar = require("@fluentui/react/lib/CommandBar");

var _Dialog = require("@fluentui/react/lib/Dialog");

var _themes = require("./themes/themes");

var _officeUiFabricReact = require("office-ui-fabric-react");

var _reportViewer = require("./reportViewer.styles");

var _reactHooks = require("@fluentui/react-hooks");

var _powerbiClientReact = require("powerbi-client-react");

var _powerbiClient = require("powerbi-client");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ReportEmbed = function ReportEmbed(props) {
  var inItReport = props.inItReport,
      accessToken = props.accessToken,
      inItfavReports = props.inItfavReports;

  var _useState = (0, _react.useState)(true),
      _useState2 = _slicedToArray(_useState, 2),
      initload = _useState2[0],
      setInItLoad = _useState2[1]; ////const themes: IReportTheme[] = useSelector(getreportThemes);


  var _useState3 = (0, _react.useState)([]),
      _useState4 = _slicedToArray(_useState3, 2),
      themesCb = _useState4[0],
      setthemesCb = _useState4[1];

  var _useState5 = (0, _react.useState)(),
      _useState6 = _slicedToArray(_useState5, 2),
      CurrentReport = _useState6[0],
      setCurrentReport = _useState6[1];

  var _useState7 = (0, _react.useState)(),
      _useState8 = _slicedToArray(_useState7, 2),
      currentReportObj = _useState8[0],
      setCurrentReportObj = _useState8[1];

  var _useState9 = (0, _react.useState)(''),
      _useState10 = _slicedToArray(_useState9, 2),
      accessToken1 = _useState10[0],
      setAccessToken = _useState10[1];

  var _useState11 = (0, _react.useState)([]),
      _useState12 = _slicedToArray(_useState11, 2),
      ReportsList = _useState12[0],
      setReportsList = _useState12[1];

  var _useState13 = (0, _react.useState)('SingleBookmark'),
      _useState14 = _slicedToArray(_useState13, 2),
      bookmarkState = _useState14[0],
      setbookmarkState = _useState14[1];

  var _useState15 = (0, _react.useState)('FavoriteStar'),
      _useState16 = _slicedToArray(_useState15, 2),
      favoriteState = _useState16[0],
      setfavoriteState = _useState16[1];

  var _useState17 = (0, _react.useState)('Filter'),
      _useState18 = _slicedToArray(_useState17, 2),
      filterState = _useState18[0],
      setFilterState = _useState18[1];

  var _useState19 = (0, _react.useState)(''),
      _useState20 = _slicedToArray(_useState19, 2),
      bookmarkName = _useState20[0],
      setbookmarkName = _useState20[1];

  var _useState21 = (0, _react.useState)(false),
      _useState22 = _slicedToArray(_useState21, 2),
      bookmarkNameDisabled = _useState22[0],
      setbookmarkNameDisabled = _useState22[1];

  var _useState23 = (0, _react.useState)([]),
      _useState24 = _slicedToArray(_useState23, 2),
      reportBookmarksDd = _useState24[0],
      setreportBookmarksDd = _useState24[1];

  var _useState25 = (0, _react.useState)([]),
      _useState26 = _slicedToArray(_useState25, 2),
      reportBookmarksCb = _useState26[0],
      setreportBookmarksCb = _useState26[1];

  var _useState27 = (0, _react.useState)([]),
      _useState28 = _slicedToArray(_useState27, 2),
      favReports = _useState28[0],
      setFavReports = _useState28[1];

  var _useState29 = (0, _react.useState)([]),
      _useState30 = _slicedToArray(_useState29, 2),
      favReportsCb = _useState30[0],
      setFavReportsCd = _useState30[1];

  (0, _react.useEffect)(function () {
    if (props && inItReport) {
      setCurrentReport(inItReport);
    }
  }, [props, inItReport]);
  (0, _react.useEffect)(function () {
    if (props && accessToken) {
      setAccessToken(accessToken);
    }
  }, [props, accessToken]);
  (0, _react.useEffect)(function () {
    if (accessToken1) {
      onloadReport();
    }
  }, [accessToken1]);
  (0, _react.useEffect)(function () {
    if (inItfavReports) {
      setInItLoad(true);

      var fReports = _toConsumableArray(inItfavReports);

      setFavReports(fReports);
    }
  }, [inItfavReports]);
  (0, _react.useEffect)(function () {
    if (CurrentReport) {
      onloadReport();
    }
  }, [CurrentReport]);
  (0, _react.useEffect)(function () {
    if (favReports) {
      loadDefaultReport();
      UpdateFevReportCB();
    }
  }, [favReports]);

  function loadDefaultReport() {
    if (favReports) {
      if (initload) {
        var i = -1; //i = favReports.findIndex(f => f.isFav == true)[0];

        var j = i >= 0 ? i : 0;
        setCurrentReport(favReports[j]);
        setInItLoad(false);
      }
    }
  }

  function UpdateFevReportCB() {
    if (favReports) {
      var newfavReportsCb = [];
      favReports.forEach(function (fr) {
        if (fr.isFav) {
          var fevR = {
            key: fr.reportId,
            name: fr.name,
            onClick: function onClick() {
              OnFevReportLoad(fr.reportId);
            }
          };
          newfavReportsCb.push(fevR);
        }
      });
      setFavReportsCd(newfavReportsCb);
    }
  } //Save details


  var saveReportPreferencesData = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var reportListtoSave;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (favReports) {
                reportListtoSave = favReports.filter(function (r) {
                  return r.isFav == true || r.bookmarks && r.bookmarks.length > 0;
                });
                if (reportListtoSave && reportListtoSave.length > 0) props.onSaveReportPreferences(reportListtoSave);
              }

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function saveReportPreferencesData() {
      return _ref.apply(this, arguments);
    };
  }();

  function onloadReport() {
    if (CurrentReport) {
      CurrentReport.isFav ? setfavoriteState('Unfavorite') : setfavoriteState('FavoriteStar');
      resetCBButtonState();
      loadReportBookmarks();
      setReportConfig(_objectSpread(_objectSpread({}, reportConfig), {}, {
        id: CurrentReport.reportId,
        embedUrl: CurrentReport.embedUrl,
        accessToken: accessToken1
      }));
    }
  }

  function loadReportBookmarks() {
    if (CurrentReport) {
      var newBookmarksItemsCb = [];
      var newBookmarkItemsDd = [];
      var rbm = CurrentReport.bookmarks;

      if (rbm && rbm.length > 0) {
        rbm.forEach(function (bm) {
          if (bm.reportId == CurrentReport.reportId) {
            var itemCb = {
              key: bm.key,
              name: bm.name,
              onClick: function onClick() {
                onApplyBookmarkClick(bm.key);
              }
            };
            newBookmarksItemsCb.push(itemCb);
            var itemDd = {
              key: bm.key,
              text: bm.name,
              title: bm.name
            };
            newBookmarkItemsDd.push(itemDd);
          }
        });
      }

      setreportBookmarksCb(newBookmarksItemsCb);
      setreportBookmarksDd(newBookmarkItemsDd);
    }
  } //Report container and actions


  var _useState31 = (0, _react.useState)({
    type: 'report',
    id: '0000',
    embedUrl: 'https://msit.powerbi.com/reportEmbed',
    tokenType: _powerbiClient.models.TokenType.Aad,
    accessToken: '',
    settings: {
      panes: {
        filters: {
          expanded: props.showReportFilter,
          visible: props.showReportFilter
        },
        bookmarks: {
          visible: false
        }
      },
      hideErrors: true,
      background: _powerbiClient.models.BackgroundType.Default
    }
  }),
      _useState32 = _slicedToArray(_useState31, 2),
      reportConfig = _useState32[0],
      setReportConfig = _useState32[1]; // Map of event handlers to be applied to the embedding report


  var eventHandlersMap = new Map([['loaded', function () {
    console.log('Report has loaded');
  }], ['rendered', function () {
    console.log('Report has rendered'); // Update display message
    //setMessage('The report is rendered')
  }], ['error', function (event) {
    if (event) {
      console.log('error loading report/Auth issue');
      console.error(event.detail);
    }
  }]]);

  function UpdateBookmarks(bms) {
    if (bms && CurrentReport) {
      var newBookmarksItemsCb = [];
      var newBookmarkItemsDd = [];
      var newBookmarItems = bms;
      bms.forEach(function (bm) {
        if (bm.reportId == CurrentReport.reportId) {
          var itemCb = {
            key: bm.key,
            name: bm.name,
            onClick: function onClick() {
              onApplyBookmarkClick(bm.key);
            }
          };
          newBookmarksItemsCb.push(itemCb);
          var itemDd = {
            key: bm.key,
            text: bm.name,
            title: bm.name
          };
          newBookmarkItemsDd.push(itemDd);
        }
      });
      setreportBookmarksCb(newBookmarksItemsCb);
      setreportBookmarksDd(newBookmarkItemsDd);
    }
  }

  var showBookmarksSettings = {
    panes: {
      bookmarks: {
        visible: true
      }
    }
  };
  var hideBookmarksSettings = {
    panes: {
      bookmarks: {
        visible: false
      }
    }
  };
  var showFiltersSettings = {
    panes: {
      filters: {
        expanded: true,
        visible: true
      }
    }
  };
  var hideFiltersSettings = {
    panes: {
      filters: {
        expanded: false,
        visible: false
      }
    }
  };

  function onCreateBookmarkClick() {
    return _onCreateBookmarkClick.apply(this, arguments);
  }

  function _onCreateBookmarkClick() {
    _onCreateBookmarkClick = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              setbookmarkNameDisabled(false);
              toggleHideDialog();

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _onCreateBookmarkClick.apply(this, arguments);
  }

  function onApplyBookmarkClick(_x) {
    return _onApplyBookmarkClick.apply(this, arguments);
  }

  function _onApplyBookmarkClick() {
    _onApplyBookmarkClick = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(key) {
      var bookMark;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!CurrentReport) {
                _context3.next = 10;
                break;
              }

              bookMark = CurrentReport.bookmarks.filter(function (x) {
                return x.key === key;
              });
              _context3.prev = 2;

              if (!(currentReportObj && bookMark && bookMark[0].bookmarkState)) {
                _context3.next = 6;
                break;
              }

              _context3.next = 6;
              return currentReportObj.bookmarksManager.applyState(bookMark[0].bookmarkState);

            case 6:
              _context3.next = 10;
              break;

            case 8:
              _context3.prev = 8;
              _context3.t0 = _context3["catch"](2);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[2, 8]]);
    }));
    return _onApplyBookmarkClick.apply(this, arguments);
  }

  function resetCBButtonState() {
    setbookmarkState('SingleBookmark');
    setFilterState('Filter');
  }

  function onAddUpdateBookmarkClick() {
    return _onAddUpdateBookmarkClick.apply(this, arguments);
  }

  function _onAddUpdateBookmarkClick() {
    _onAddUpdateBookmarkClick = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              toggleHideDialog();

              try {
                if (currentReportObj) {
                  UpdateBookmarkState('add');
                }
              } catch (e) {//console.log(e.error())
              }

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _onAddUpdateBookmarkClick.apply(this, arguments);
  }

  function UpdateBookmarkState(_x2) {
    return _UpdateBookmarkState.apply(this, arguments);
  }

  function _UpdateBookmarkState() {
    _UpdateBookmarkState = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(action) {
      var loadedReportId, capturedBookmark, newBookmarksItemsCb, newBookmarkItemsDd, newBookmarItems, newfavReports, l, m, n, _l, _m, _n2, newDBBookmarkitem, newBookmarkitem, newCurrentReport, j, newFavReportitem;

      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;

              if (!(currentReportObj && CurrentReport)) {
                _context5.next = 23;
                break;
              }

              loadedReportId = currentReportObj.getId();
              _context5.next = 5;
              return currentReportObj.bookmarksManager.capture();

            case 5:
              capturedBookmark = _context5.sent;
              newBookmarksItemsCb = reportBookmarksCb;
              newBookmarkItemsDd = reportBookmarksDd;
              newBookmarItems = [];
              if (CurrentReport.bookmarks) newBookmarItems = CurrentReport.bookmarks;
              newfavReports = _toConsumableArray(favReports);

              if (action === 'delete') {
                l = -1;
                l = newBookmarItems.findIndex(function (x) {
                  return x.name === reportIdSelectedBookmark;
                });
                newBookmarItems.splice(l, 1);
                m = -1;
                m = newBookmarkItemsDd.findIndex(function (x) {
                  return x.text === reportIdSelectedBookmark;
                });
                newBookmarkItemsDd.splice(m, 1);
                n = -1;
                n = newBookmarksItemsCb.findIndex(function (x) {
                  return x.text === reportIdSelectedBookmark;
                });
                newBookmarksItemsCb.splice(n, 1);
              } else {
                if (action === 'update') {
                  _l = -1;
                  _l = newBookmarItems.findIndex(function (x) {
                    return x.name === reportIdSelectedBookmark;
                  });
                  newBookmarItems.splice(_l, 1);
                  _m = -1;
                  _m = newBookmarkItemsDd.findIndex(function (x) {
                    return x.text === reportIdSelectedBookmark;
                  });
                  newBookmarkItemsDd.splice(_m, 1);
                  _n2 = -1;
                  _n2 = newBookmarksItemsCb.findIndex(function (x) {
                    return x.text === reportIdSelectedBookmark;
                  });
                  newBookmarksItemsCb.splice(_n2, 1);
                }

                newBookmarksItemsCb.push({
                  key: capturedBookmark.name,
                  name: bookmarkName,
                  onClick: function onClick() {
                    onApplyBookmarkClick(capturedBookmark.name);
                  }
                });
                newDBBookmarkitem = {
                  key: capturedBookmark.name,
                  text: bookmarkName,
                  title: bookmarkName
                };
                newBookmarkItemsDd.push(newDBBookmarkitem);
                newBookmarkitem = {
                  key: capturedBookmark.name,
                  name: bookmarkName,
                  isDefault: false,
                  bookmarkState: capturedBookmark.state,
                  reportId: loadedReportId
                };
                newBookmarItems.push(newBookmarkitem);
              }

              newCurrentReport = _objectSpread(_objectSpread({}, CurrentReport), {}, {
                bookmarks: newBookmarItems
              });
              setreportBookmarksCb(newBookmarksItemsCb);
              setreportBookmarksDd(newBookmarkItemsDd);
              setCurrentReport(newCurrentReport);
              j = -1;
              j = newfavReports.findIndex(function (x) {
                return x.reportId === CurrentReport.reportId;
              });

              if (j >= 0) {
                newFavReportitem = _objectSpread(_objectSpread({}, newfavReports[j]), {}, {
                  bookmarks: newBookmarItems
                });
                newfavReports.splice(j, 1);
              } else {
                newFavReportitem = _objectSpread(_objectSpread({}, CurrentReport), {}, {
                  bookmarks: newBookmarItems
                });
              }

              newfavReports.push(newFavReportitem);
              setFavReports(newfavReports);
              setbookmarkName(''); //Save details to DB

              saveReportPreferencesData();

            case 23:
              _context5.next = 27;
              break;

            case 25:
              _context5.prev = 25;
              _context5.t0 = _context5["catch"](0);

            case 27:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, null, [[0, 25]]);
    }));
    return _UpdateBookmarkState.apply(this, arguments);
  }

  function onGlobalBookmarksToggle() {
    return _onGlobalBookmarksToggle.apply(this, arguments);
  }

  function _onGlobalBookmarksToggle() {
    _onGlobalBookmarksToggle = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.prev = 0;

              if (!currentReportObj) {
                _context6.next = 11;
                break;
              }

              if (!(bookmarkState === 'SingleBookmark')) {
                _context6.next = 8;
                break;
              }

              //SingleBookmarkSolid
              setbookmarkState('SingleBookmarkSolid');
              _context6.next = 6;
              return currentReportObj.updateSettings(showBookmarksSettings);

            case 6:
              _context6.next = 11;
              break;

            case 8:
              setbookmarkState('SingleBookmark');
              _context6.next = 11;
              return currentReportObj.updateSettings(hideBookmarksSettings);

            case 11:
              _context6.next = 15;
              break;

            case 13:
              _context6.prev = 13;
              _context6.t0 = _context6["catch"](0);

            case 15:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, null, [[0, 13]]);
    }));
    return _onGlobalBookmarksToggle.apply(this, arguments);
  }

  var openPBIPortal = function openPBIPortal() {
    if (CurrentReport && CurrentReport.webURL) {
      var newWindow = window.open(CurrentReport.webURL, '_blank', 'noopener,noreferrer');
      if (newWindow) newWindow.opener = null;
    }
  };

  function onFullScreenClick() {
    try {
      if (currentReportObj) {
        currentReportObj.fullscreen();
      }
    } catch (e) {//console.log(e.error())
    }
  }

  function onRefreshReportClick() {
    try {
      if (currentReportObj) {
        currentReportObj.refresh();
      }
    } catch (e) {//console.log(e.error())
    }
  }

  function onReportFilterToggle() {
    return _onReportFilterToggle.apply(this, arguments);
  }

  function _onReportFilterToggle() {
    _onReportFilterToggle = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.prev = 0;

              if (!currentReportObj) {
                _context7.next = 11;
                break;
              }

              if (!(filterState === 'Filter')) {
                _context7.next = 8;
                break;
              }

              //SingleBookmarkSolid
              setFilterState('FilterSolid');
              _context7.next = 6;
              return currentReportObj.updateSettings(showFiltersSettings);

            case 6:
              _context7.next = 11;
              break;

            case 8:
              setFilterState('Filter');
              _context7.next = 11;
              return currentReportObj.updateSettings(hideFiltersSettings);

            case 11:
              _context7.next = 15;
              break;

            case 13:
              _context7.prev = 13;
              _context7.t0 = _context7["catch"](0);

            case 15:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, null, [[0, 13]]);
    }));
    return _onReportFilterToggle.apply(this, arguments);
  }

  function OnFevReportLoad(key) {
    if (favReports) {
      var i = -1;
      i = favReports.findIndex(function (x) {
        return x.reportId === key;
      });
      setCurrentReport(favReports[i]);
    }
  }

  function onAddRemoveFavoritesClick() {
    try {
      if (favoriteState === 'FavoriteStar') {
        if (currentReportObj && CurrentReport) {
          setfavoriteState('Unfavorite');
          var newfavReportsCb = favReportsCb;
          var newfavReports = favReports;
          var i = -1;
          i = newfavReportsCb.findIndex(function (x) {
            return x.key === CurrentReport.reportId;
          });

          if (i < 0) {
            newfavReportsCb.push({
              key: CurrentReport.reportId,
              name: CurrentReport.name,
              onClick: function onClick() {
                OnFevReportLoad(CurrentReport.reportId);
              }
            });
            setFavReportsCd(newfavReportsCb);
          }

          var j = -1;
          j = newfavReports.findIndex(function (x) {
            return x.reportId === CurrentReport.reportId;
          });

          if (j < 0) {
            var newFavReportitem = {
              reportId: CurrentReport.reportId,
              name: CurrentReport.name,
              embedUrl: currentReportObj.config.embedUrl,
              bookmarks: CurrentReport.bookmarks,
              isFav: true,
              webURL: CurrentReport.webURL
            };
            newfavReports.push(newFavReportitem);
            setFavReports(newfavReports);
          } else {
            var _newFavReportitem = _objectSpread(_objectSpread({}, newfavReports[j]), {}, {
              isFav: true
            });

            newfavReports.splice(j, 1);
            newfavReports.push(_newFavReportitem);
            setFavReports(newfavReports);
          }
        }
      } else if (favoriteState === 'Unfavorite') {
        if (CurrentReport) {
          var _newfavReportsCb = favReportsCb;
          var _newfavReports = favReports;

          var _i2 = -1;

          _i2 = _newfavReportsCb.findIndex(function (x) {
            return x.key === CurrentReport.reportId;
          });

          _newfavReportsCb.splice(_i2, 1);

          var _j = -1;

          _j = _newfavReports.findIndex(function (x) {
            return x.reportId === CurrentReport.reportId && x.isFav;
          });

          _newfavReports.splice(_j, 1);

          setFavReportsCd(_newfavReportsCb);
          setFavReports(_newfavReports);
          setfavoriteState('FavoriteStar');
        }
      } //Save details to DB


      saveReportPreferencesData();
    } catch (e) {//console.log(e.error())
    }
  }

  var _useState33 = (0, _react.useState)(''),
      _useState34 = _slicedToArray(_useState33, 2),
      reportIdSelectedBookmark = _useState34[0],
      setReportIdSelectedBookmark = _useState34[1];

  function onExistingBookmarkSelect(event, option) {
    if (option === undefined) {
      return;
    } else {
      setReportIdSelectedBookmark(option.key.toString());
      setsaveUpdateBtnTxt('Update');

      if (CurrentReport && CurrentReport.bookmarks) {
        var i = -1;
        i = CurrentReport.bookmarks.findIndex(function (x) {
          return x.key === option.key.toString();
        });

        if (i >= 0) {
          setbookmarkName(CurrentReport.bookmarks[i].name);
          setbookmarkNameDisabled(true);
        }
      }
    }
  }

  function onThemeSelection(_x3) {
    return _onThemeSelection.apply(this, arguments);
  }

  function _onThemeSelection() {
    _onThemeSelection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(i) {
      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              try {
                if (currentReportObj) {
                  if (i == 't0') currentReportObj.resetTheme();else if (i == 't2') currentReportObj.applyTheme({
                    themeJson: _themes.Tidal
                  });else if (i == 't3') currentReportObj.applyTheme({
                    themeJson: _themes.Divergent
                  });else if (i == 't4') currentReportObj.applyTheme({
                    themeJson: _themes.Executive
                  });else if (i == 't5') currentReportObj.applyTheme({
                    themeJson: _themes.DarkTheme
                  });
                }
              } catch (e) {// console.log(e.error())
              }

            case 1:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));
    return _onThemeSelection.apply(this, arguments);
  }

  function onBookmarkNameChange(event, newValue) {
    if (newValue) setbookmarkName(newValue);
  }

  var overflowProps = {
    ariaLabel: 'More commands',
    menuProps: {
      items: [],
      // CommandBar will determine items rendered in overflow
      isBeakVisible: true,
      beakWidth: 20,
      gapSpace: 10,
      directionalHint: _officeUiFabricReact.DirectionalHint.topCenter
    }
  };

  function fitToWidth() {
    if (currentReportObj) {
      currentReportObj.resizeActivePage(_powerbiClient.models.PageSizeType.Widescreen);
    }
  }

  (0, _react.useEffect)(function () {
    if (reportConfig) {
      if (currentReportObj) {
        currentReportObj.configChanged(true);
      }
    }
  }, [reportConfig]);

  function fitToPage() {
    if (currentReportObj) {
      currentReportObj.resizeActivePage(_powerbiClient.models.PageSizeType.Standard);
    }
  }

  var _items = [{
    key: 'favoriteItems',
    text: 'My Favorites',
    iconProps: {
      iconName: 'FavoriteList'
    },
    subMenuProps: {
      items: favReportsCb
    }
  }, {
    key: 'mybookmark',
    text: 'My Bookmarks',
    iconProps: {
      iconName: 'BookmarkReport'
    },
    subMenuProps: {
      items: reportBookmarksCb
    }
  }, {
    key: 'theme',
    text: 'Select Theme',
    iconProps: {
      iconName: 'BucketColor'
    },
    subMenuProps: {
      items: //themesCb
      [{
        key: 'Default',
        text: 'Default',
        onClick: function onClick() {
          onThemeSelection('t0');
        }
      }, {
        key: 'Tidal',
        text: 'Tidal',
        onClick: function onClick() {
          onThemeSelection('t2');
        }
      }, {
        key: 'Divergent',
        text: 'Divergent',
        onClick: function onClick() {
          onThemeSelection('t3');
        }
      }, {
        key: 'Executive',
        text: 'Executive',
        onClick: function onClick() {
          onThemeSelection('t4');
        }
      }, {
        key: 'DarkTheme',
        text: 'DarkTheme',
        onClick: function onClick() {
          onThemeSelection('t5');
        }
      } // {
      //   key: 'Contrast', text: 'Contrast Modes',
      //   items: [
      //     { key: 'HighContrast1', text: 'HighContrast1', onClick: () => { onThemeSelection('c1') } },
      //     { key: 'HighContrast2', text: 'HighContrast2', onClick: () => { onThemeSelection('c2') } },
      //     { key: 'HighContrastDark', text: 'HighContrastDark', onClick: () => { onThemeSelection('c3') } },
      //     { key: 'HighContrastLight', text: 'HighContrastLight', onClick: () => {
      //       console.log('c3');
      //       loadedReport.applyTheme({ contrastMode : models.ContrastMode.HighContrast1 });
      //       //setreportcontrastMode(models.ContrastMode.HighContrast1);
      //       let newConfig = {
      //         ...reportConfig,
      //         id: SelectedReport.key.toString(),
      //         embedUrl: SelectedReport.title,
      //         accessToken: accessToken,
      //         contrastMode: models.ContrastMode.HighContrast1
      //       }
      //       console.log(reportcontrastMode);
      //       //setReportConfig(newConfig);
      //       //loadedReport.config = newConfig;
      //       loadedReport.render(newConfig);
      //      }},
      //     { key: 'NoContrast', text: 'Default', onClick: () => {
      //       console.log('c0');
      //       setreportcontrastMode(models.ContrastMode.HighContrastBlack);
      //       let newConfig = {
      //         ...reportConfig,
      //         id: SelectedReport.key.toString(),
      //         embedUrl: SelectedReport.title,
      //         accessToken: accessToken,
      //         contrastMode: models.ContrastMode.HighContrastBlack
      //       }
      //       console.log(reportcontrastMode);
      //       //setReportConfig(newConfig);
      //       //loadedReport.config = newConfig;
      //       loadedReport.reload() //.render(newConfig);
      //     }},
      //   ]
      // },
      ]
    }
  }];
  var _overflowItems = [{
    key: 'fullscreen',
    text: 'Fullscreen',
    iconProps: {
      iconName: 'FullScreen'
    },
    onClick: function onClick() {
      onFullScreenClick();
    }
  }, {
    key: 'fittopage',
    text: 'Fit to page',
    onClick: function onClick() {
      fitToPage();
    },
    iconProps: {
      iconName: 'FitPage'
    }
  }, {
    key: 'fitWidth',
    text: 'Fit to width',
    onClick: function onClick() {
      fitToWidth();
    },
    iconProps: {
      iconName: 'FitWidth'
    }
  }, {
    key: 'gotoPBI',
    text: 'Go to PowerBI',
    onClick: function onClick() {
      openPBIPortal();
    },
    iconProps: {
      iconName: 'PowerBILogo'
    }
  }];
  var _farItems = [{
    key: 'addfevorite',
    text: 'Add to Fevorite',
    // This needs an ariaLabel since it's icon-only
    ariaLabel: 'Add to fevorite options',
    iconOnly: true,
    iconProps: {
      iconName: favoriteState
    },
    onClick: function onClick() {
      onAddRemoveFavoritesClick();
    }
  }, {
    key: 'createbookmark',
    text: 'Create Personal Bookmark',
    // This needs an ariaLabel since it's icon-only
    ariaLabel: 'Create personal Bookmark',
    iconOnly: true,
    iconProps: {
      iconName: 'AddBookmark'
    },
    onClick: function onClick() {
      onCreateBookmarkClick();
    }
  }, {
    key: 'globalbookmark',
    text: 'Global Bookmarks',
    // This needs an ariaLabel since it's icon-only
    ariaLabel: 'Global Bookmarks window',
    iconOnly: true,
    iconProps: {
      iconName: bookmarkState
    },
    onClick: function onClick() {
      onGlobalBookmarksToggle();
    }
  }, {
    key: 'filters',
    text: 'filters',
    ariaLabel: 'filters',
    iconOnly: true,
    iconProps: {
      iconName: filterState
    },
    onClick: function onClick() {
      onReportFilterToggle();
    }
  }, {
    key: 'refresh',
    text: 'refresh',
    ariaLabel: 'Info',
    iconOnly: true,
    iconProps: {
      iconName: 'Refresh'
    },
    onClick: function onClick() {
      onRefreshReportClick();
    }
  }, {
    key: 'info',
    text: 'Info',
    ariaLabel: 'Info',
    iconOnly: true,
    iconProps: {
      iconName: 'Info'
    },
    onClick: function onClick() {
      return console.log('Info');
    }
  }];

  var _useBoolean = (0, _reactHooks.useBoolean)(true),
      _useBoolean2 = _slicedToArray(_useBoolean, 2),
      hideDialog = _useBoolean2[0],
      toggleHideDialog = _useBoolean2[1].toggle;

  var modelProps = {
    isBlocking: true,
    topOffsetFixed: true
  };
  var dialogContentProps = {
    type: _Dialog.DialogType.largeHeader,
    title: 'Personal bookmark',
    subText: 'Give a name to save new bookmark'
  };

  function deleteBookmark() {
    if (CurrentReport) {
      UpdateBookmarkState('delete');
    }
  }

  ;

  function defaultBookmark() {
    console.log('default');
  }

  ;

  var _useState35 = (0, _react.useState)('Save'),
      _useState36 = _slicedToArray(_useState35, 2),
      saveUpdateBtnTxt = _useState36[0],
      setsaveUpdateBtnTxt = _useState36[1];

  var emojiIcon = {
    iconName: 'Delete'
  };

  var renderMain = function renderMain() {
    return /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Fabric, null, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack, null, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Text, {
      variant: "xLarge",
      className: _reportViewer.controlClass.marginleft15
    }, CurrentReport ? CurrentReport.name : "Selected Report Header"), /*#__PURE__*/_react["default"].createElement("div", {
      id: "pbiEmbed"
    }, /*#__PURE__*/_react["default"].createElement(_CommandBar.CommandBar, {
      overflowButtonProps: overflowProps // Custom render all buttons
      //buttonAs={CustomButton}
      ,
      items: _items,
      overflowItems: _overflowItems,
      farItems: _farItems,
      ariaLabel: "Use left and right arrow keys to navigate between commands",
      className: _reportViewer.controlClass.commandbarStyles,
      hidden: props.commandbarHidden
    }), /*#__PURE__*/_react["default"].createElement(_Dialog.Dialog, {
      hidden: hideDialog,
      onDismiss: toggleHideDialog,
      modalProps: modelProps,
      dialogContentProps: dialogContentProps
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack, {
      horizontalAlign: "start",
      horizontal: true,
      tokens: _reportViewer.stackTokens
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack.Item, {
      grow: 1
    }, /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
      placeholder: "My bookmarks",
      label: "My bookmarks:",
      multiSelect: false,
      options: reportBookmarksDd,
      ariaLabel: "My bookmarks:",
      onChange: onExistingBookmarkSelect
    })), /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack.Item, {
      grow: 1
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.IconButton, {
      iconProps: emojiIcon,
      title: "Delete",
      ariaLabel: "Delete",
      onClick: deleteBookmark,
      className: _reportViewer.controlClass.submitStyles
    }))), /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.TextField, {
      label: "New Bookmark Name ",
      required: true,
      disabled: bookmarkNameDisabled,
      onChange: onBookmarkNameChange,
      maxLength: 50
    }), /*#__PURE__*/_react["default"].createElement(_Dialog.DialogFooter, null, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack, {
      horizontalAlign: "start",
      horizontal: true,
      tokens: _reportViewer.stackTokens1
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack.Item, {
      grow: 1
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Checkbox, {
      label: "Default",
      onChange: defaultBookmark,
      className: _reportViewer.controlClass.margintop5
    })), /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack.Item, {
      grow: 1
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.PrimaryButton, {
      onClick: onAddUpdateBookmarkClick,
      text: saveUpdateBtnTxt
    })), /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.Stack.Item, {
      grow: 1
    }, /*#__PURE__*/_react["default"].createElement(_officeUiFabricReact.DefaultButton, {
      onClick: toggleHideDialog,
      text: "Cancel"
    }))))), /*#__PURE__*/_react["default"].createElement(_powerbiClientReact.PowerBIEmbed, {
      embedConfig: reportConfig,
      eventHandlers: eventHandlersMap,
      cssClassName: _reportViewer.controlClass.Embedcontainer,
      getEmbeddedComponent: function getEmbeddedComponent(embeddedReport) {
        setCurrentReportObj(embeddedReport);
      }
    }))));
  };

  return renderMain();
};

var _default = ReportEmbed;
exports["default"] = _default;