{"version":3,"file":"getSlots.js","sourceRoot":"../src/","sources":["next/getSlots.ts"],"names":[],"mappings":";;AAAA,6BAA+B;AAC/B,iDAAkE;AAElE,2CAA0C;AAE1C;;;;;;;;;;;;;;;GAeG;AACU,QAAA,QAAQ,GAAG,UAAC,KAAwB,EAAE,SAAgC;IACjF,IAAM,KAAK,GAAsB;QAC/B,IAAI,EAAE,KAAK,CAAC,EAAE,IAAI,KAAK;KACxB,CAAC;IACF,IAAM,SAAS,GAAsB;QACnC,IAAI,EAAE,OAAO,KAAK,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC,iCAAqB,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,gBAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC;KAClG,CAAC;IAEF,IAAI,SAAS,EAAE;QACb,KAAmB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS,EAAE;YAAzB,IAAM,MAAI,kBAAA;YACb,IAAM,cAAc,GAAG,KAAK,CAAC,MAAI,CAAC,IAAI,EAAE,CAAC;YACjC,IAAA,sBAAmB,EAAnB,oCAAmB,EAAE,kCAAQ,CAAoB;YACzD,IAAM,eAAe,GAAG,OAAO,MAAM,KAAK,QAAQ,CAAC;YACnD,IAAM,WAAW,GAAG,eAAe,IAAI,cAAc,CAAC,QAAQ,KAAK,SAAS,CAAC;YAE7E,KAAK,CAAC,MAAI,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,uBAAU,CAAC,CAAC,CAAC,MAAM,CAAC;YAEhD,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;gBAClC,SAAS,CAAC,MAAI,CAAC,GAAG;oBAChB,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAI,CAAC,EAAE,gBAAI,CAAC,cAAc,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;iBAC1E,CAAC;gBACF,KAAK,CAAC,MAAI,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC;aAC9B;iBAAM,IAAI,KAAK,CAAC,MAAI,CAAC,KAAK,uBAAU,EAAE;gBACrC,SAAS,CAAC,MAAI,CAAC,GAAG,eAAe;oBAC/B,CAAC,CAAC,iCAAqB,CAAC,MAAM,EAAE,cAAc,CAAC;oBAC/C,CAAC,CAAC,gBAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;aAClC;SACF;KACF;IAED,OAAO,EAAE,KAAK,OAAA,EAAE,SAAS,WAAA,EAAE,CAAC;AAC9B,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, omit } from '@uifabric/utilities';\nimport { GenericDictionary } from './types';\nimport { nullRender } from './nullRender';\n\n/**\n * Given the state and an array of slot names, will break out `slots` and `slotProps`\n * collections.\n *\n * The root is always derived from the `as` prop.\n *\n * Slots will render as null if they are rendered as primitives with undefined children.\n *\n * The slotProps will always omit the `as` prop within them, and for slots that are string\n * primitives, the props will be filtered according the the slot type. For example, if the\n * slot is rendered `as: 'a'`, the props will be filtered for acceptable anchor props.\n *\n * @param state - State including slot definitions\n * @param slotNames - Name of which props are slots\n * @returns An object containing the `slots` map and `slotProps` map.\n */\nexport const getSlots = (state: GenericDictionary, slotNames?: string[] | undefined) => {\n  const slots: GenericDictionary = {\n    root: state.as || 'div',\n  };\n  const slotProps: GenericDictionary = {\n    root: typeof state.as === 'string' ? getNativeElementProps(state.as, state) : omit(state, ['as']),\n  };\n\n  if (slotNames) {\n    for (const name of slotNames) {\n      const slotDefinition = state[name] || {};\n      const { as: slotAs = 'span', children } = slotDefinition;\n      const isSlotPrimitive = typeof slotAs === 'string';\n      const isSlotEmpty = isSlotPrimitive && slotDefinition.children === undefined;\n\n      slots[name] = isSlotEmpty ? nullRender : slotAs;\n\n      if (typeof children === 'function') {\n        slotProps[name] = {\n          children: children(slots[name], omit(slotDefinition, ['as', 'children'])),\n        };\n        slots[name] = React.Fragment;\n      } else if (slots[name] !== nullRender) {\n        slotProps[name] = isSlotPrimitive\n          ? getNativeElementProps(slotAs, slotDefinition)\n          : omit(slotDefinition, ['as']);\n      }\n    }\n  }\n\n  return { slots, slotProps };\n};\n"]}