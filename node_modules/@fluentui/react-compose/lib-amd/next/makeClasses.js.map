{"version":3,"file":"makeClasses.js","sourceRoot":"../src/","sources":["next/makeClasses.ts"],"names":[],"mappings":";;;IAIa,QAAA,WAAW,GAAG,UAAC,OAAwB;QAClD,mEAAmE;QAC7D,IAAA,qDAAwD,EAAtD,gBAAK,EAAE,wBAAS,EAAE,gBAAoC,CAAC;QAE/D,OAAO,SAAS,UAAU,CAAC,KAAwB;;YACjD,IAAI,eAAe,GAAG,EAAE,CAAC;YACzB,IAAI,WAAW,GAAG,EAAE,CAAC;YAErB,KAA2B,UAAsB,EAAtB,KAAA,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAtB,cAAsB,EAAtB,IAAsB,EAAE;gBAA9C,IAAM,YAAY,SAAA;gBACrB,IAAI,KAAK,CAAC,YAAY,CAAC,EAAE;oBACvB,eAAe,GAAG,6BAAa,CAAC,eAAe,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;iBAC3E;aACF;YAED,KAAuB,UAAkB,EAAlB,KAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAlB,cAAkB,EAAlB,IAAkB,EAAE;gBAAtC,IAAM,QAAQ,SAAA;gBACjB,IAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACnC,iFAAiF;gBACjF,IAAI,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,SAAS,EAAE;oBAC7C,WAAW,GAAG,6BAAa,CAAC,WAAW,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;iBACvE;aACF;YAED,KAAK,CAAC,SAAS,GAAG,6BAAa,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,IAAI,EAAE,eAAe,EAAE,WAAW,CAAC,CAAC;YAE3F,KAAuB,UAAkB,EAAlB,KAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAlB,cAAkB,EAAlB,IAAkB,EAAE;gBAAtC,IAAM,QAAQ,SAAA;gBACjB,IAAI,QAAQ,KAAK,MAAM,EAAE;oBACvB,KAAK,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACxC,KAAK,CAAC,QAAQ,CAAC,CAAC,SAAS,GAAG,6BAAa,OAAC,KAAK,CAAC,QAAQ,CAAC,0CAAE,SAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACxF;aACF;QACH,CAAC,CAAC;IACJ,CAAC,CAAC","sourcesContent":["import { GenericDictionary, ClassDictionary } from './types';\nimport { appendClasses } from '../appendClasses';\nimport { createResolvedMap } from '../createClassResolver';\n\nexport const makeClasses = (classes: ClassDictionary) => {\n  // This is in creation time, so this will happen once per css file.\n  const { slots, modifiers, enums } = createResolvedMap(classes);\n\n  return function useClasses(state: GenericDictionary) {\n    let modifierClasses = '';\n    let enumClasses = '';\n\n    for (const modifierName of Object.keys(modifiers)) {\n      if (state[modifierName]) {\n        modifierClasses = appendClasses(modifierClasses, modifiers[modifierName]);\n      }\n    }\n\n    for (const enumName of Object.keys(enums)) {\n      const enumValues = enums[enumName];\n      // if we have a class which matches the enumName and current state value, add it.\n      if (enumValues[state[enumName]] !== undefined) {\n        enumClasses = appendClasses(enumClasses, enumValues[state[enumName]]);\n      }\n    }\n\n    state.className = appendClasses(state.className, slots.root, modifierClasses, enumClasses);\n\n    for (const slotName of Object.keys(slots)) {\n      if (slotName !== 'root') {\n        state[slotName] = state[slotName] || {};\n        state[slotName].className = appendClasses(state[slotName]?.className, slots[slotName]);\n      }\n    }\n  };\n};\n"]}