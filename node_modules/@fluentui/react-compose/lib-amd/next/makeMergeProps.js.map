{"version":3,"file":"makeMergeProps.js","sourceRoot":"../src/","sources":["next/makeMergeProps.ts"],"names":[],"mappings":";;;IAYA;;;;;;OAMG;IACU,QAAA,cAAc,GAAG,UAA6B,OAA+B;QAA/B,wBAAA,EAAA,YAA+B;QACxF,IAAM,SAAS,0BAAO,CAAC,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC,GAAE,OAAO,EAAC,CAAC;QAE1D,IAAM,UAAU,GAAG,UAAC,MAAyB;YAAE,kBAA8C;iBAA9C,UAA8C,EAA9C,qBAA8C,EAA9C,IAA8C;gBAA9C,iCAA8C;;YAC3F,KAAoB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAE;gBAAzB,IAAM,KAAK,iBAAA;gBACd,IAAI,KAAK,EAAE;oBACT,KAAuB,UAAkB,EAAlB,KAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAlB,cAAkB,EAAlB,IAAkB,EAAE;wBAAtC,IAAM,QAAQ,SAAA;wBACjB,IAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;wBAClC,IAAM,aAAa,GAAG,OAAO,SAAS,CAAC;wBAEvC,IAAI,SAAS,KAAK,SAAS,EAAE;4BAC3B,IAAI,SAAS,IAAI,aAAa,KAAK,QAAQ,EAAE;gCAC3C,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;oCAC5B,uBAAuB;oCACvB,MAAM,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC;iCAC9B;qCAAM;oCACL,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;oCAE1C,IACE,OAAO,MAAM,CAAC,QAAQ,CAAC,KAAK,QAAQ;wCACpC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC;wCAC/B,CAAC,SAAS,IAAI,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;wCACnF,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAClC;wCACA,yEAAyE;wCACzE,MAAM,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC;qCAC9B;yCAAM;wCACL,mBAAmB;wCACnB,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC,CAAC;qCACzC;iCACF;6BACF;iCAAM,IAAI,QAAQ,KAAK,WAAW,EAAE;gCACnC,IAAI,SAAS,EAAE;oCACb,yBAAyB;oCACzB,MAAM,CAAC,QAAQ,CAAC,GAAG,eAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC,CAAC;iCACrD;6BACF;iCAAM;gCACL,MAAM,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC;6BAC9B;yBACF;qBACF;iBACF;aACF;YACD,OAAO,MAAgB,CAAC;QAC1B,CAAC,CAAC;QAEF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { css } from '@uifabric/utilities';\nimport { GenericDictionary } from './types';\n\nexport type MergePropsOptions = {\n  /**\n   * A list of props to deep merge. By default, `style` will\n   * always be deep merged so it's not required to be provided.\n   */\n  deepMerge?: string[];\n};\n\n/**\n * Helper which deep clones props, but respectively assigns JSX, object refs, and class names\n * appropriately.\n *\n * @param target - the target object to merge onto.\n * @param propSets - one or more prop sets to deep merge onto the target.\n */\nexport const makeMergeProps = <TState = GenericDictionary>(options: MergePropsOptions = {}) => {\n  const deepMerge = [...(options.deepMerge || []), 'style'];\n\n  const mergeProps = (target: GenericDictionary, ...propSets: (GenericDictionary | undefined)[]): TState => {\n    for (const props of propSets) {\n      if (props) {\n        for (const propName of Object.keys(props)) {\n          const propValue = props[propName];\n          const propValueType = typeof propValue;\n\n          if (propValue !== undefined) {\n            if (propValue && propValueType === 'object') {\n              if (Array.isArray(propValue)) {\n                // for arrays, replace.\n                target[propName] = propValue;\n              } else {\n                target[propName] = target[propName] || {};\n\n                if (\n                  typeof target[propName] !== 'object' ||\n                  React.isValidElement(propValue) ||\n                  (propValue && typeof propValue === 'object' && propValue.hasOwnProperty('current')) ||\n                  deepMerge.indexOf(propName) === -1\n                ) {\n                  // if target is not an object, or value is JSX,  or a ref object, replace\n                  target[propName] = propValue;\n                } else {\n                  // else deep merge.\n                  mergeProps(target[propName], propValue);\n                }\n              }\n            } else if (propName === 'className') {\n              if (propValue) {\n                // for classnames, append\n                target[propName] = css(target[propName], propValue);\n              }\n            } else {\n              target[propName] = propValue;\n            }\n          }\n        }\n      }\n    }\n    return target as TState;\n  };\n\n  return mergeProps;\n};\n"]}