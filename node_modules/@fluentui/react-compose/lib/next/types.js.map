{"version":3,"file":"types.js","sourceRoot":"../src/","sources":["next/types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\n\n/**\n * Generic name to any dictionary.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type GenericDictionary = Record<string, any>;\n\n/**\n * Class dictionary.\n */\nexport type ClassDictionary = Record<string, string>;\n\nexport interface ComponentProps extends GenericDictionary {\n  as?: React.ElementType;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ref?: React.Ref<any>;\n  className?: string;\n}\n\n// Shorthand types\n\nexport type ShorthandRenderFunction<TProps> = (Component: React.ElementType<TProps>, props: TProps) => React.ReactNode;\n\nexport type ShorthandProps<TProps extends ComponentProps = {}> =\n  | React.ReactChild\n  | React.ReactNodeArray\n  | React.ReactPortal\n  | boolean\n  | number\n  | null\n  | undefined\n  | (TProps &\n      ComponentProps & {\n        children?: TProps['children'] | ShorthandRenderFunction<TProps>;\n      });\n"]}