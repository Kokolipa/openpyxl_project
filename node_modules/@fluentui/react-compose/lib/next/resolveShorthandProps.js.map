{"version":3,"file":"resolveShorthandProps.js","sourceRoot":"../src/","sources":["next/resolveShorthandProps.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B;;;;;GAKG;AACH,MAAM,CAAC,IAAM,qBAAqB,GAAG,UAAU,KAAa,EAAE,kBAAoC;IAChG,IAAI,QAAQ,GAAG,KAAK,CAAC;IAErB,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,EAAE;QACnD,QAAQ,gBACH,KAAK,CACT,CAAC;QACF,KAAuB,UAAkB,EAAlB,yCAAkB,EAAlB,gCAAkB,EAAlB,IAAkB,EAAE;YAAtC,IAAM,QAAQ,2BAAA;YACjB,IAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;YAElC,IAAI,SAAS,KAAK,SAAS,IAAI,CAAC,OAAO,SAAS,KAAK,QAAQ,IAAI,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,EAAE;gBACjG,8DAA8D;gBAC7D,QAAgB,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC;aACvD;SACF;KACF;IAED,OAAO,QAAkB,CAAC;AAC5B,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\n/**\n * Ensures that the given slots are represented using object syntax. This ensures that\n * the object can be merged along with other objects.\n * @param props - The incoming props\n * @param shorthandPropNames - An array of prop names to apply simplification to\n */\nexport const resolveShorthandProps = <TProps,>(props: TProps, shorthandPropNames: (keyof TProps)[]) => {\n  let newProps = props;\n\n  if (shorthandPropNames && shorthandPropNames.length) {\n    newProps = {\n      ...props,\n    };\n    for (const propName of shorthandPropNames) {\n      const propValue = props[propName];\n\n      if (propValue !== undefined && (typeof propValue !== 'object' || React.isValidElement(propValue))) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (newProps as any)[propName] = { children: propValue };\n      }\n    }\n  }\n\n  return newProps as TProps;\n};\n"]}