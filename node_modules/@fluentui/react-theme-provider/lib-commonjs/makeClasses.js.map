{"version":3,"file":"makeClasses.js","sourceRoot":"../src/","sources":["makeClasses.ts"],"names":[],"mappings":";;AAEA,+CAA8C;AAC9C,2CAA4D;AAE5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACU,QAAA,WAAW,GAAG,UACzB,eAAoF;IAEpF,IAAM,SAAS,GAAG,uBAAU,CAAC,eAAe,CAAC,CAAC;IAE9C,OAAO,UAAC,KAAa,EAAE,OAA0B;QAC/C,IAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;QAEnC,2BAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { IStyle } from '@uifabric/merge-styles';\nimport { Theme } from '@fluentui/theme';\nimport { applyClasses } from './applyClasses';\nimport { makeStyles, UseStylesOptions } from './makeStyles';\n\n/**\n * The `makeClasses` helper encapsulates `makeStyles`, and given a style map which follows\n * a specific naming convention, produces a hook function which takes in the component\n * draft state and auto distributes classes into the draft state. This removes a lot of\n * boilerplate code using `classnames` helpers to manage distributing classnames manually.\n *\n * Usage:\n *\n * ```tsx\n * const useButtonClasses makeClasses(theme => {\n *   root: { ... },\n *   _primary: { ... },\n *   _size_small: { ... }\n * });\n * ```\n *\n * The class naming convention is broken down as follows:\n *\n * * No underscores - a slot class name. (E.g. \"root\", \"icon\", etc)\n * * Prefixed with underscore - a modifier. (E.g. \"_primary\", \"_fluid\")\n * * Contains 2 underscores - a name/value matcher. (E.g. \"_size_small\")\n *\n * Modifier classnames are added to the root className when the state contains a truthy value\n * of the same name. For example, when the primary flag is present, the \"_primary\" modifier\n * class will be appended to the root className prop.\n *\n * Enum classnames are also added to the root className when teh state contains an enum value\n * which matches the value in the className. for example, when the `size` enum value is `small`,\n * the \"_size_small\" enum class will be appended to the root className prop.\n */\nexport const makeClasses = <TState extends {}>(\n  styleOrFunction: Record<string, IStyle> | ((theme: Theme) => Record<string, IStyle>),\n) => {\n  const useStyles = makeStyles(styleOrFunction);\n\n  return (state: TState, options?: UseStylesOptions) => {\n    const classes = useStyles(options);\n\n    applyClasses(state, classes);\n  };\n};\n"]}