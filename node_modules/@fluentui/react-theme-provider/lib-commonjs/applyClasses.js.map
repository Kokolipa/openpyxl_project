{"version":3,"file":"applyClasses.js","sourceRoot":"../src/","sources":["applyClasses.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACU,QAAA,YAAY,GAAG,UAAoB,KAAa,EAAE,QAAgC;IAC7F,KAAkB,UAAqB,EAArB,KAAA,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAArB,cAAqB,EAArB,IAAqB,EAAE;QAApC,IAAM,GAAG,SAAA;QACZ,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE7B,QAAQ,KAAK,CAAC,MAAM,EAAE;YACpB,KAAK,CAAC;gBACJ,IAAI,GAAG,KAAK,MAAM,EAAE;oBAClB,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;iBACzB;qBAAM,IAAI,GAAG,KAAK,oBAAoB,EAAE;oBACvC,wFAAwF;oBACxF,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;iBAC9B;gBACD,MAAM;YAER,KAAK,CAAC;gBACJ,IAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAE9B,8DAA8D;gBAC9D,IAAK,KAAa,CAAC,YAAY,CAAC,IAAK,KAAa,CAAC,OAAO,KAAK,YAAY,EAAE;oBAC3E,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;iBACzB;gBACD,MAAM;YAER,KAAK,CAAC;gBACJ,IAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1B,IAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAE3B,8DAA8D;gBAC9D,IAAK,KAAa,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;oBAC1C,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;iBACzB;gBACD,MAAM;SACT;KACF;AACH,CAAC,CAAC;AAEF,8DAA8D;AAC9D,SAAS,SAAS,CAAC,KAA0B,EAAE,SAAiB,EAAE,IAAa;IAC7E,IAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAErE,IAAI,WAAW,CAAC,SAAS,EAAE;QACzB,WAAW,CAAC,SAAS,IAAI,GAAG,GAAG,SAAS,CAAC;KAC1C;SAAM;QACL,WAAW,CAAC,SAAS,GAAG,SAAS,CAAC;KACnC;AACH,CAAC","sourcesContent":["/**\n * The `applyClasses` takes in a mutable state and a class map and, given the class map\n * follows the a naming convention described below, auto-applies classes to the appropriate places\n * in the state.\n *\n * Usage:\n *\n * ```tsx\n * const useButtonClasses = makeClasses(theme => {\n *   root: { ... },\n *   _primary: { ... },\n *   _size_small: { ... }\n * });\n * ```\n *\n * The class naming convention is broken down as follows:\n *\n * * No underscores - a slot class name. (E.g. \"root\", \"icon\", etc)\n * * Prefixed with underscore - a modifier. (E.g. \"_primary\", \"_fluid\")\n * * Contains 2 underscores - a name/value matcher. (E.g. \"_size_small\")\n *\n * Modifier classnames are added to the root className when the state contains a truthy value\n * of the same name. For example, when the primary flag is present, the \"_primary\" modifier\n * class will be appended to the root className prop.\n *\n * Enum classnames are also added to the root className when teh state contains an enum value\n * which matches the value in the className. for example, when the `size` enum value is `small`,\n * the \"_size_small\" enum class will be appended to the root className prop.\n */\nexport const applyClasses = <TState extends {}>(state: TState, classMap: Record<string, string>) => {\n  for (const key of Object.keys(classMap)) {\n    const value = classMap[key];\n    const parts = key.split('_');\n\n    switch (parts.length) {\n      case 1:\n        if (key === 'root') {\n          _setClass(state, value);\n        } else if (key !== 'subComponentStyles') {\n          // The subComponentStyles check is an unfortunate workaround to avoid breaking partners.\n          _setClass(state, value, key);\n        }\n        break;\n\n      case 2:\n        const modifierName = parts[1];\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((state as any)[modifierName] || (state as any).variant === modifierName) {\n          _setClass(state, value);\n        }\n        break;\n\n      case 3:\n        const enumName = parts[1];\n        const enumValue = parts[2];\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((state as any)[enumName] === enumValue) {\n          _setClass(state, value);\n        }\n        break;\n    }\n  }\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _setClass(state: Record<string, any>, className: string, slot?: string) {\n  const currentSlot = slot ? (state[slot] = state[slot] || {}) : state;\n\n  if (currentSlot.className) {\n    currentSlot.className += ' ' + className;\n  } else {\n    currentSlot.className = className;\n  }\n}\n"]}