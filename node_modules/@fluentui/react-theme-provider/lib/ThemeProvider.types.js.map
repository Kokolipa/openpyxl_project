{"version":3,"file":"ThemeProvider.types.js","sourceRoot":"../src/","sources":["ThemeProvider.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { StyleRenderer } from './styleRenderers/types';\nimport { Theme, PartialTheme } from './types';\nimport { ICustomizerContext } from '@uifabric/utilities';\n\n/**\n * {@docCategory ThemeProvider}\n * Props for the ThemeProvider component.\n */\nexport interface ThemeProviderProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * A component that should be used as the root element of the ThemeProvider component.\n   */\n  as?: React.ElementType;\n\n  /**\n   * Optional ref to the root element.\n   */\n  ref?: React.Ref<HTMLElement>;\n\n  /**\n   * Defines the theme provided by the user.\n   */\n  theme?: PartialTheme | Theme;\n\n  /**\n   * Optional interface for registering dynamic styles. Defaults to using `merge-styles`. Use this\n   * to opt into a particular rendering implementation, such as `emotion`, `styled-components`, or `jss`.\n   * Note: performance will differ between all renders. Please measure your scenarios before using an alternative\n   * implementation.\n   */\n  renderer?: StyleRenderer;\n\n  /**\n   * Defines where body-related theme is applied to.\n   * Setting to 'element' will apply body styles to the root element of ThemeProvider.\n   * Setting to 'body' will apply body styles to document body.\n   * Setting to 'none' will not apply body styles to either element or body.\n   *\n   * @defaultvalue 'element'\n   */\n  applyTo?: 'element' | 'body' | 'none';\n}\n\n/**\n * State for the ThemeProvider component.\n */\nexport type ThemeProviderState = Omit<ThemeProviderProps, 'theme' | 'ref'> & {\n  theme: Theme;\n\n  ref: React.RefObject<HTMLElement>;\n\n  customizerContext: ICustomizerContext;\n};\n"]}