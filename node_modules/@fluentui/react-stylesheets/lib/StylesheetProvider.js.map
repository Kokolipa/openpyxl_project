{"version":3,"file":"StylesheetProvider.js","sourceRoot":"../src/","sources":["StylesheetProvider.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,iBAAiB,EAAyB,MAAM,qBAAqB,CAAC;AAG/E;;;;GAIG;AACH,MAAM,CAAC,IAAM,kBAAkB,GAAG,UAAC,KAAuD;IACxF,IAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;IACpD,IAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CACjC,cAAM,OAAA,uBAEA,OAAe,GAChB,KAAK,EACR,EAJI,CAIJ;IACF,2FAA2F;IAC3F,iGAAiG;IACjG,uDAAuD;IACvD,CAAC,OAAO,CAAC,CACV,CAAC;IAEF,OAAO,oBAAC,iBAAiB,CAAC,QAAQ,IAAC,KAAK,EAAE,aAAa,IAAG,KAAK,CAAC,QAAQ,CAA8B,CAAC;AACzG,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,kBAAkB,GAAG,iBAAiB,CAAC,QAAQ,CAAC","sourcesContent":["import * as React from 'react';\nimport { StylesheetContext, StylesheetContextType } from './StylesheetContext';\nimport { StylesheetProviderProps } from './StylesheetProvider.types';\n\n/**\n * Provider for registering stylesheets in a given target document.\n * The `register` method can be called many times and will only register once\n * per unique target document.\n */\nexport const StylesheetProvider = (props: React.PropsWithChildren<StylesheetProviderProps>) => {\n  const context = React.useContext(StylesheetContext);\n  const mergedContext = React.useMemo<StylesheetContextType>(\n    () => ({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ...(context as any),\n      ...props,\n    }),\n    // Only recompute the context to pass down if the parent passes a new one. Props should not\n    // be mutating dynamically for a provider, or may be doing so accidentally. Avoid recomputations.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [context],\n  );\n\n  return <StylesheetContext.Provider value={mergedContext}>{props.children}</StylesheetContext.Provider>;\n};\n\nexport const StylesheetConsumer = StylesheetContext.Consumer;\n"]}