{"version":3,"file":"LayerHost.js","sourceRoot":"../src/","sources":["components/Layer/LayerHost.tsx"],"names":[],"mappings":";;;IAKA;QAA+B,qCAAgC;QAK7D,mBAAY,KAAsB;YAAlC,YACE,kBAAM,KAAK,CAAC,SAWb;YATC,IAAM,WAAW,GAAG,iBAAK,EAAE,CAAC;YAEpB,IAAA,mBAAwB,EAAxB,yCAAwB,CAAgB;YAEhD,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YAErB,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC,SAAS,EAAkB,CAAC;YAEjD,kCAAsB,CAAC,KAAI,CAAC,CAAC;;QAC/B,CAAC;QAEM,uCAAmB,GAA1B;YACE,mGAAmG;QACrG,CAAC;QAEM,yCAAqB,GAA5B;YACE,OAAO,KAAK,CAAC;QACf,CAAC;QAEM,qCAAiB,GAAxB;YACE,sCAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACrC,sCAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAG,CAAC,CAAC;QACpC,CAAC;QAEM,wCAAoB,GAA3B;YACE,wCAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACvC,sCAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAG,CAAC,CAAC;QACpC,CAAC;QAEM,0BAAM,GAAb;YACE,OAAO,gDAAS,IAAI,CAAC,KAAK,IAAE,SAAS,EAAE,eAAG,CAAC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,OAAO,IAAI,CAAC;QAC1G,CAAC;QACH,gBAAC;IAAD,CAAC,AAxCD,CAA+B,KAAK,CAAC,SAAS,GAwC7C;IAxCY,8BAAS","sourcesContent":["import * as React from 'react';\nimport { css, getId, initializeComponentRef } from '../../Utilities';\nimport { ILayerHostProps, ILayerHost } from './LayerHost.types';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\n\nexport class LayerHost extends React.Component<ILayerHostProps> implements ILayerHost {\n  public hostId: string;\n\n  public rootRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: ILayerHostProps) {\n    super(props);\n\n    const layerHostId = getId();\n\n    const { id: hostId = layerHostId } = this.props;\n\n    this.hostId = hostId;\n\n    this.rootRef = React.createRef<HTMLDivElement>();\n\n    initializeComponentRef(this);\n  }\n\n  public notifyLayersChanged(): void {\n    // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n  }\n\n  public shouldComponentUpdate() {\n    return false;\n  }\n\n  public componentDidMount(): void {\n    registerLayerHost(this.hostId, this);\n    notifyHostChanged(this.props.id!);\n  }\n\n  public componentWillUnmount(): void {\n    unregisterLayerHost(this.hostId, this);\n    notifyHostChanged(this.props.id!);\n  }\n\n  public render(): JSX.Element {\n    return <div {...this.props} className={css('ms-LayerHost', this.props.className)} ref={this.rootRef} />;\n  }\n}\n"]}